// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ecommerce

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProductManagementClient is the client API for ProductManagement service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductManagementClient interface {
	AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
	GetProduct(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Product, error)
	SearchProducts(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (ProductManagement_SearchProductsClient, error)
	UpdateProducts(ctx context.Context, opts ...grpc.CallOption) (ProductManagement_UpdateProductsClient, error)
}

type productManagementClient struct {
	cc grpc.ClientConnInterface
}

func NewProductManagementClient(cc grpc.ClientConnInterface) ProductManagementClient {
	return &productManagementClient{cc}
}

func (c *productManagementClient) AddProduct(ctx context.Context, in *AddProductRequest, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/ecommerce.ProductManagement/addProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) GetProduct(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Product, error) {
	out := new(Product)
	err := c.cc.Invoke(ctx, "/ecommerce.ProductManagement/getProduct", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *productManagementClient) SearchProducts(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (ProductManagement_SearchProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductManagement_ServiceDesc.Streams[0], "/ecommerce.ProductManagement/searchProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &productManagementSearchProductsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ProductManagement_SearchProductsClient interface {
	Recv() (*Product, error)
	grpc.ClientStream
}

type productManagementSearchProductsClient struct {
	grpc.ClientStream
}

func (x *productManagementSearchProductsClient) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *productManagementClient) UpdateProducts(ctx context.Context, opts ...grpc.CallOption) (ProductManagement_UpdateProductsClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductManagement_ServiceDesc.Streams[1], "/ecommerce.ProductManagement/updateProducts", opts...)
	if err != nil {
		return nil, err
	}
	x := &productManagementUpdateProductsClient{stream}
	return x, nil
}

type ProductManagement_UpdateProductsClient interface {
	Send(*Product) error
	CloseAndRecv() (*wrapperspb.StringValue, error)
	grpc.ClientStream
}

type productManagementUpdateProductsClient struct {
	grpc.ClientStream
}

func (x *productManagementUpdateProductsClient) Send(m *Product) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productManagementUpdateProductsClient) CloseAndRecv() (*wrapperspb.StringValue, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(wrapperspb.StringValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductManagementServer is the server API for ProductManagement service.
// All implementations must embed UnimplementedProductManagementServer
// for forward compatibility
type ProductManagementServer interface {
	AddProduct(context.Context, *AddProductRequest) (*wrapperspb.StringValue, error)
	GetProduct(context.Context, *wrapperspb.StringValue) (*Product, error)
	SearchProducts(*wrapperspb.StringValue, ProductManagement_SearchProductsServer) error
	UpdateProducts(ProductManagement_UpdateProductsServer) error
	mustEmbedUnimplementedProductManagementServer()
}

// UnimplementedProductManagementServer must be embedded to have forward compatible implementations.
type UnimplementedProductManagementServer struct {
}

func (UnimplementedProductManagementServer) AddProduct(context.Context, *AddProductRequest) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProduct not implemented")
}
func (UnimplementedProductManagementServer) GetProduct(context.Context, *wrapperspb.StringValue) (*Product, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProduct not implemented")
}
func (UnimplementedProductManagementServer) SearchProducts(*wrapperspb.StringValue, ProductManagement_SearchProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method SearchProducts not implemented")
}
func (UnimplementedProductManagementServer) UpdateProducts(ProductManagement_UpdateProductsServer) error {
	return status.Errorf(codes.Unimplemented, "method UpdateProducts not implemented")
}
func (UnimplementedProductManagementServer) mustEmbedUnimplementedProductManagementServer() {}

// UnsafeProductManagementServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductManagementServer will
// result in compilation errors.
type UnsafeProductManagementServer interface {
	mustEmbedUnimplementedProductManagementServer()
}

func RegisterProductManagementServer(s grpc.ServiceRegistrar, srv ProductManagementServer) {
	s.RegisterService(&ProductManagement_ServiceDesc, srv)
}

func _ProductManagement_AddProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProductRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).AddProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.ProductManagement/addProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).AddProduct(ctx, req.(*AddProductRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_GetProduct_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProductManagementServer).GetProduct(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ecommerce.ProductManagement/getProduct",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProductManagementServer).GetProduct(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProductManagement_SearchProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(wrapperspb.StringValue)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProductManagementServer).SearchProducts(m, &productManagementSearchProductsServer{stream})
}

type ProductManagement_SearchProductsServer interface {
	Send(*Product) error
	grpc.ServerStream
}

type productManagementSearchProductsServer struct {
	grpc.ServerStream
}

func (x *productManagementSearchProductsServer) Send(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func _ProductManagement_UpdateProducts_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductManagementServer).UpdateProducts(&productManagementUpdateProductsServer{stream})
}

type ProductManagement_UpdateProductsServer interface {
	SendAndClose(*wrapperspb.StringValue) error
	Recv() (*Product, error)
	grpc.ServerStream
}

type productManagementUpdateProductsServer struct {
	grpc.ServerStream
}

func (x *productManagementUpdateProductsServer) SendAndClose(m *wrapperspb.StringValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productManagementUpdateProductsServer) Recv() (*Product, error) {
	m := new(Product)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductManagement_ServiceDesc is the grpc.ServiceDesc for ProductManagement service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductManagement_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ecommerce.ProductManagement",
	HandlerType: (*ProductManagementServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addProduct",
			Handler:    _ProductManagement_AddProduct_Handler,
		},
		{
			MethodName: "getProduct",
			Handler:    _ProductManagement_GetProduct_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "searchProducts",
			Handler:       _ProductManagement_SearchProducts_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "updateProducts",
			Handler:       _ProductManagement_UpdateProducts_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "product_management.proto",
}
